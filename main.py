from fastapi import FastAPI
from pydantic import BaseModel
from typing import List
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import aiohttp
import threading
import asyncio
from models.user import Base, TelegramUser
from database import engine, async_session
import json

# --- –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –º–æ–¥–µ–ª–µ–π –ø–µ—Ä–µ–¥ –∑–∞–ø—É—Å–∫–æ–º ---
async def init_models():
    async with engine.begin() as conn:
        await conn.run_sync(Base.metadata.create_all)

asyncio.run(init_models())

# --- FastAPI —á–∞—Å—Ç—å ---
app = FastAPI()

class SearchRequest(BaseModel):
    user_id: int
    mood: str
    budget: str
    lat: float
    lon: float

class Place(BaseModel):
    title: str
    url: str

class SearchResponse(BaseModel):
    results: List[Place]

moods = {
    "üòî –ì—Ä—É—Å—Ç—å": "–í–æ—Ç —É—é—Ç–Ω—ã–µ –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–≤–ª–µ—á—å—Å—è –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å.",
    "üòç –†–∞–¥–æ—Å—Ç—å": "–í–æ—Ç –º–µ—Å—Ç–∞, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä—è–¥–∏—Ç—å—Å—è –µ—â—ë –±–æ–ª—å—à–µ!",
    "üò† –ó–ª–æ—Å—Ç—å": "–í–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –≤—ã–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä –∏ –æ—Ç–≤–ª–µ—á—å—Å—è.",
    "üôÇ –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": "–í–æ—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞.",
    "ü§Ø –£—Å—Ç–∞–ª–æ—Å—Ç—å": "–í–æ—Ç –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.",
    "ü§© –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ": "–í–æ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —á—Ç–æ–±—ã –∑–∞—Ä—è–¥–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏."
}

budgets = {
    "üí∏ –≠–∫–æ–Ω–æ–º": "–ë—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.",
    "üí∞ –°—Ä–µ–¥–Ω–∏–π": "–•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π.",
    "üíé –ü—Ä–µ–º–∏—É–º": "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∂–¥—É—Ç —Ç–µ–±—è!"
}

@app.post("/search", response_model=SearchResponse)
async def search_places(request: SearchRequest):
    overpass_url = "https://overpass-api.de/api/interpreter"
    overpass_query = f"""
    [out:json];
    node["amenity"="cafe"](around:1000,{request.lat},{request.lon});
    out;
    """

    async with aiohttp.ClientSession() as session:
        async with session.post(overpass_url, data=overpass_query) as resp:
            data = await resp.json()

    places = []
    for element in data.get("elements", []):
        name = element.get("tags", {}).get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        lat = element.get("lat")
        lon = element.get("lon")
        url = f"https://www.openstreetmap.org/?mlat={lat}&mlon={lon}#map=18/{lat}/{lon}"
        places.append({"title": name, "url": url})

    return SearchResponse(results=places)

# --- Telegram-–±–æ—Ç —á–∞—Å—Ç—å ---
ASK_NAME, ASK_MOOD, ASK_BUDGET, MAIN_MENU, ASK_LOCATION = range(5)
user_data_store = {}

main_menu_keyboard = ReplyKeyboardMarkup(
    [["üéØ –ù–æ–≤–∞—è –ø–æ–¥–±–æ—Ä–∫–∞", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"]], resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø FeelGo ‚Äî —Ç–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –∏ –º–µ—Å—Ç–∞–º üåü\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def ask_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    username = update.effective_user.username
    name = update.message.text

    async with async_session() as session:
        user = await session.get(TelegramUser, user_id)
        if not user:
            user = TelegramUser(user_id=user_id, username=username, name=name, favorites=json.dumps([]))
            session.add(user)
            await session.commit()

    user_data_store[user_id] = {"name": name, "favorites": []}

    await update.message.reply_text(
        f"–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {name}! üòä\n–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",
        reply_markup=ReplyKeyboardMarkup([[m] for m in moods.keys()], resize_keyboard=True)
    )
    return ASK_MOOD

async def ask_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.effective_user.id]["mood"] = update.message.text
    await update.message.reply_text(
        "–ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç —Ç—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—à—å?",
        reply_markup=ReplyKeyboardMarkup([[b] for b in budgets.keys()], resize_keyboard=True)
    )
    return ASK_BUDGET

async def ask_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data_store[user_id]["budget"] = update.message.text
    await update.message.reply_text(
        "üîç –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞...\nüìç –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)]], resize_keyboard=True
        )
    )
    return ASK_LOCATION

async def fetch_recommendations(user_id, mood, budget, lat, lon):
    async with aiohttp.ClientSession() as session:
        async with session.post("http://localhost:8000/search", json={
            "user_id": user_id,
            "mood": mood,
            "budget": budget,
            "lat": lat,
            "lon": lon
        }) as resp:
            return await resp.json()

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    mood = user_data_store[user_id]["mood"]
    budget = user_data_store[user_id]["budget"]
    lat = update.message.location.latitude
    lon = update.message.location.longitude

    await update.message.reply_text("‚è≥ –ü–æ–¥–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...")

    results = await fetch_recommendations(user_id, mood, budget, lat, lon)
    places = results.get("results", [])

    if not places:
        await update.message.reply_text("üôÅ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.")
    else:
        for place in places:
            title = place.get("title")
            url = place.get("url")
            await update.message.reply_text(f"üèô {title}\nüìç {url}")

        user_data_store[user_id]["last_recommendation"] = f"{moods[mood]} {budgets[budget]}"

    await update.message.reply_text(
        "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?",
        reply_markup=ReplyKeyboardMarkup(
            [["‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]], resize_keyboard=True
        )
    )
    return MAIN_MENU

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        last = user_data_store[user_id].get("last_recommendation")
        if last:
            async with async_session() as session:
                user = await session.get(TelegramUser, user_id)
                if user:
                    favorites = json.loads(user.favorites)
                    favorites.append(last)
                    user.favorites = json.dumps(favorites)
                    await session.commit()
            await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚≠ê", reply_markup=main_menu_keyboard)
        else:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")

    elif text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        async with async_session() as session:
            user = await session.get(TelegramUser, user_id)
            if user and user.favorites:
                favorites = json.loads(user.favorites)
                if favorites:
                    await update.message.reply_text("\n\n".join(favorites), reply_markup=main_menu_keyboard)
                else:
                    await update.message.reply_text("–ü–æ–∫–∞ —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.", reply_markup=main_menu_keyboard)
            else:
                await update.message.reply_text("–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω.", reply_markup=main_menu_keyboard)

    elif text == "üéØ –ù–æ–≤–∞—è –ø–æ–¥–±–æ—Ä–∫–∞":
        await update.message.reply_text(
            "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",
            reply_markup=ReplyKeyboardMarkup([[m] for m in moods.keys()], resize_keyboard=True)
        )
        return ASK_MOOD

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")

    return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def start_bot():
    TOKEN = "YOUR_BOT_TOKEN_HERE"
    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_mood)],
            ASK_MOOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_budget)],
            ASK_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_location)],
            ASK_LOCATION: [MessageHandler(filters.LOCATION, handle_location)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(conv_handler)
    print("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

# --- –ó–∞–ø—É—Å–∫ FastAPI –∏ Telegram –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ---
def run_fastapi():
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    threading.Thread(target=run_fastapi, daemon=True).start()
    start_bot()
