
from telegram import Update, ReplyKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler

ASK_NAME, ASK_MOOD, ASK_BUDGET, MAIN_MENU = range(4)

moods = {
    "üòî –ì—Ä—É—Å—Ç—å": "–í–æ—Ç —É—é—Ç–Ω—ã–µ –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–≤–ª–µ—á—å—Å—è –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å.",
    "üòç –†–∞–¥–æ—Å—Ç—å": "–í–æ—Ç –º–µ—Å—Ç–∞, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä—è–¥–∏—Ç—å—Å—è –µ—â—ë –±–æ–ª—å—à–µ!",
    "üò† –ó–ª–æ—Å—Ç—å": "–í–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –≤—ã–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä –∏ –æ—Ç–≤–ª–µ—á—å—Å—è.",
    "üôÇ –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": "–í–æ—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞.",
    "ü§Ø –£—Å—Ç–∞–ª–æ—Å—Ç—å": "–í–æ—Ç –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.",
    "ü§© –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ": "–í–æ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —á—Ç–æ–±—ã –∑–∞—Ä—è–¥–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏."
}

budgets = {
    "üí∏ –≠–∫–æ–Ω–æ–º": "–ë—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.",
    "üí∞ –°—Ä–µ–¥–Ω–∏–π": "–•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π.",
    "üíé –ü—Ä–µ–º–∏—É–º": "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∂–¥—É—Ç —Ç–µ–±—è!"
}

user_data_store = {}

main_menu_keyboard = ReplyKeyboardMarkup(
    [["üéØ –ù–æ–≤–∞—è –ø–æ–¥–±–æ—Ä–∫–∞", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"]], resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø FeelGo ‚Äî —Ç–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –∏ –º–µ—Å—Ç–∞–º üåü\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def ask_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.effective_user.id] = {
        "name": update.message.text,
        "favorites": []
    }
    await update.message.reply_text(f"–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {update.message.text}! üòä\n–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",
                                    reply_markup=ReplyKeyboardMarkup([[m] for m in moods.keys()], resize_keyboard=True))
    return ASK_MOOD

async def ask_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.effective_user.id]["mood"] = update.message.text
    await update.message.reply_text("–ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç —Ç—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—à—å?",
                                    reply_markup=ReplyKeyboardMarkup([[b] for b in budgets.keys()], resize_keyboard=True))
    return ASK_BUDGET

async def show_recommendation(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    mood = user_data_store[user_id]["mood"]
    budget = update.message.text
    name = user_data_store[user_id]["name"]
    recommendation = f"{moods[mood]} {budgets[budget]}"
    user_data_store[user_id]["last_recommendation"] = recommendation
    await update.message.reply_text(
        f"{name}, —Ç—ã –≤—ã–±—Ä–∞–ª –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏–µ '{mood}' –∏ –±—é–¥–∂–µ—Ç '{budget}'.\n{recommendation}"
    )
    await update.message.reply_text("–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å —ç—Ç–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?",
                                    reply_markup=ReplyKeyboardMarkup(
                                        [["‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
                                        resize_keyboard=True))
    return MAIN_MENU

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        last = user_data_store[user_id].get("last_recommendation")
        if last:
            user_data_store[user_id]["favorites"].append(last)
            await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚≠ê", reply_markup=main_menu_keyboard)
        else:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return MAIN_MENU

    elif text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        favorites = user_data_store[user_id].get("favorites", [])
        if favorites:
            await update.message.reply_text("\n\n".join(favorites), reply_markup=main_menu_keyboard)
        else:
            await update.message.reply_text("–ü–æ–∫–∞ —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.", reply_markup=main_menu_keyboard)
        return MAIN_MENU

    elif text == "üéØ –ù–æ–≤–∞—è –ø–æ–¥–±–æ—Ä–∫–∞":
        await update.message.reply_text("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",
                                        reply_markup=ReplyKeyboardMarkup(
                                            [[m] for m in moods.keys()], resize_keyboard=True))
        return ASK_MOOD

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def main():
    TOKEN = "7800040116:AAGpWmzJoP79h2hA5q7VQNmDiI2jJCagKM8"
    app = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_mood)],
            ASK_MOOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_budget)],
            ASK_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, show_recommendation)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    app.add_handler(conv_handler)
    print("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    app.run_polling()

if __name__ == "__main__":
    main()

