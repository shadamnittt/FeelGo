from fastapi import FastAPI
from pydantic import BaseModel
from typing import List
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import aiohttp
import threading

# --- FastAPI —á–∞—Å—Ç—å ---

app = FastAPI()

class SearchRequest(BaseModel):
    user_id: int
    mood: str
    budget: str
    lat: float
    lon: float

class Place(BaseModel):
    title: str
    url: str

class SearchResponse(BaseModel):
    results: List[Place]

moods = {
    "üòî –ì—Ä—É—Å—Ç—å": "–í–æ—Ç —É—é—Ç–Ω—ã–µ –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–≤–ª–µ—á—å—Å—è –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å.",
    "üòç –†–∞–¥–æ—Å—Ç—å": "–í–æ—Ç –º–µ—Å—Ç–∞, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä—è–¥–∏—Ç—å—Å—è –µ—â—ë –±–æ–ª—å—à–µ!",
    "üò† –ó–ª–æ—Å—Ç—å": "–í–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –≤—ã–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä –∏ –æ—Ç–≤–ª–µ—á—å—Å—è.",
    "üôÇ –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": "–í–æ—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞.",
    "ü§Ø –£—Å—Ç–∞–ª–æ—Å—Ç—å": "–í–æ—Ç –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.",
    "ü§© –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ": "–í–æ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —á—Ç–æ–±—ã –∑–∞—Ä—è–¥–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏."
}

budgets = {
    "üí∏ –≠–∫–æ–Ω–æ–º": "–ë—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.",
    "üí∞ –°—Ä–µ–¥–Ω–∏–π": "–•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π.",
    "üíé –ü—Ä–µ–º–∏—É–º": "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∂–¥—É—Ç —Ç–µ–±—è!"
}

@app.post("/search", response_model=SearchResponse)
async def search_places(request: SearchRequest):
    overpass_url = "https://overpass-api.de/api/interpreter"
    # –ò—â–µ–º –∫–∞—Ñ–µ –≤ —Ä–∞–¥–∏—É—Å–µ 1000 –º–µ—Ç—Ä–æ–≤ –æ—Ç –ø–µ—Ä–µ–¥–∞–Ω–Ω—ã—Ö –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç
    overpass_query = f"""
    [out:json];
    node["amenity"="cafe"](around:1000,{request.lat},{request.lon});
    out;
    """

    async with aiohttp.ClientSession() as session:
        async with session.post(overpass_url, data=overpass_query) as resp:
            data = await resp.json()

    places = []
    for element in data.get("elements", []):
        name = element.get("tags", {}).get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        lat = element.get("lat")
        lon = element.get("lon")
        url = f"https://www.openstreetmap.org/?mlat={lat}&mlon={lon}#map=18/{lat}/{lon}"
        places.append({"title": name, "url": url})

    return SearchResponse(results=places)


# --- Telegram-–±–æ—Ç —á–∞—Å—Ç—å ---

ASK_NAME, ASK_MOOD, ASK_BUDGET, MAIN_MENU, ASK_LOCATION = range(5)

user_data_store = {}

main_menu_keyboard = ReplyKeyboardMarkup(
    [["üéØ –ù–æ–≤–∞—è –ø–æ–¥–±–æ—Ä–∫–∞", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"]], resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø FeelGo ‚Äî —Ç–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –∏ –º–µ—Å—Ç–∞–º üåü\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def ask_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.effective_user.id] = {
        "name": update.message.text,
        "favorites": []
    }
    await update.message.reply_text(
        f"–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {update.message.text}! üòä\n–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",
        reply_markup=ReplyKeyboardMarkup([[m] for m in moods.keys()], resize_keyboard=True)
    )
    return ASK_MOOD

async def ask_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.effective_user.id]["mood"] = update.message.text
    await update.message.reply_text(
        "–ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç —Ç—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—à—å?",
        reply_markup=ReplyKeyboardMarkup([[b] for b in budgets.keys()], resize_keyboard=True)
    )
    return ASK_BUDGET

async def ask_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data_store[user_id]["budget"] = update.message.text
    await update.message.reply_text(
        "üîç –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞...\nüìç –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
            resize_keyboard=True
        )
    )
    return ASK_LOCATION

async def fetch_recommendations(user_id, mood, budget, lat, lon):
    async with aiohttp.ClientSession() as session:
        async with session.post("http://localhost:8000/search", json={
            "user_id": user_id,
            "mood": mood,
            "budget": budget,
            "lat": lat,
            "lon": lon
        }) as resp:
            return await resp.json()

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    mood = user_data_store[user_id]["mood"]
    budget = user_data_store[user_id]["budget"]
    lat = update.message.location.latitude
    lon = update.message.location.longitude

    await update.message.reply_text("‚è≥ –ü–æ–¥–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...")

    results = await fetch_recommendations(user_id, mood, budget, lat, lon)
    places = results.get("results", [])

    if not places:
        await update.message.reply_text("üôÅ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.")
    else:
        for place in places:
            title = place.get("title")
            url = place.get("url")
            await update.message.reply_text(f"üèô {title}\nüìç {url}")

        user_data_store[user_id]["last_recommendation"] = f"{moods[mood]} {budgets[budget]}"

    await update.message.reply_text(
        "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?",
        reply_markup=ReplyKeyboardMarkup(
            [["‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
            resize_keyboard=True
        )
    )
    return MAIN_MENU

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        last = user_data_store[user_id].get("last_recommendation")
        if last:
            user_data_store[user_id]["favorites"].append(last)
            await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚≠ê", reply_markup=main_menu_keyboard)
        else:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return MAIN_MENU

    elif text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        favorites = user_data_store[user_id].get("favorites", [])
        if favorites:
            await update.message.reply_text("\n\n".join(favorites), reply_markup=main_menu_keyboard)
        else:
            await update.message.reply_text("–ü–æ–∫–∞ —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.", reply_markup=main_menu_keyboard)
        return MAIN_MENU

    elif text == "üéØ –ù–æ–≤–∞—è –ø–æ–¥–±–æ—Ä–∫–∞":
        await update.message.reply_text(
            "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",
            reply_markup=ReplyKeyboardMarkup(
                [[m] for m in moods.keys()], resize_keyboard=True)
        )
        return ASK_MOOD

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def start_bot():
    TOKEN = "7800040116:AAGpWmzJoP79h2hA5q7VQNmDiI2jJCagKM8"
    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_mood)],
            ASK_MOOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_budget)],
            ASK_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_location)],
            ASK_LOCATION: [MessageHandler(filters.LOCATION, handle_location)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(conv_handler)
    print("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

# --- –ó–∞–ø—É—Å–∫ FastAPI –∏ Telegram –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ---

def run_fastapi():
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_fastapi, daemon=True).start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    start_bot()







from fastapi import FastAPI
from pydantic import BaseModel
from typing import List
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import aiohttp
import threading

# --- FastAPI —á–∞—Å—Ç—å ---

app = FastAPI()

class SearchRequest(BaseModel):
    user_id: int
    mood: str
    budget: str
    lat: float
    lon: float
    category: str | None = None

class Place(BaseModel):
    title: str
    url: str

class SearchResponse(BaseModel):
    results: List[Place]

moods = {
    "üòî –ì—Ä—É—Å—Ç—å": "–í–æ—Ç —É—é—Ç–Ω—ã–µ –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–≤–ª–µ—á—å—Å—è –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å.",
    "üòç –†–∞–¥–æ—Å—Ç—å": "–í–æ—Ç –º–µ—Å—Ç–∞, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä—è–¥–∏—Ç—å—Å—è –µ—â—ë –±–æ–ª—å—à–µ!",
    "üò† –ó–ª–æ—Å—Ç—å": "–í–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –≤—ã–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä –∏ –æ—Ç–≤–ª–µ—á—å—Å—è.",
    "üôÇ –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": "–í–æ—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞.",
    "ü§Ø –£—Å—Ç–∞–ª–æ—Å—Ç—å": "–í–æ—Ç –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.",
    "ü§© –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ": "–í–æ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —á—Ç–æ–±—ã –∑–∞—Ä—è–¥–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏."
}

budgets = {
    "üí∏ –≠–∫–æ–Ω–æ–º": "–ë—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.",
    "üí∞ –°—Ä–µ–¥–Ω–∏–π": "–•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π.",
    "üíé –ü—Ä–µ–º–∏—É–º": "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∂–¥—É—Ç —Ç–µ–±—è!"
}

from fastapi import FastAPI
from pydantic import BaseModel
from typing import Optional

app = FastAPI()

from typing import List, Optional
from pydantic import BaseModel

class Place(BaseModel):
    name: Optional[str]
    lat: float
    lon: float
    amenity: Optional[str] = None
    osm_type: Optional[str] = None
    osm_id: Optional[int] = None

class SearchRequest(BaseModel):
    user_id: int
    mood: str
    budget: str
    lat: float
    lon: float
    category: Optional[str] = None

class SearchResponse(BaseModel):
    places: List[Place]

@app.post("/search", response_model=SearchResponse)
async def search_places(request: SearchRequest):
    amenity_map = {
        "–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã": "cinema",
        "–ü–∞—Ä–∫–∏": "park",
        "–ö–æ—Ñ–µ–π–Ω–∏": "cafe",
        "–ú—É–∑–µ–∏": "museum",
        "–ì–∞–ª–µ—Ä–µ–∏": "arts_centre",
        "–ö–æ–≤–æ—Ä–∫–∏–Ω–≥–∏": "coworking_space",
        "–°–ø–æ—Ä—Ç–∑–∞–ª—ã": "gym",
        "–ë–∞—Ç—É—Ç–Ω—ã–µ —Ü–µ–Ω—Ç—Ä—ã": "trampoline_park",
        "–ë–æ—É–ª–∏–Ω–≥–∏": "bowling_alley",
        "–ë–∏–±–ª–∏–æ—Ç–µ–∫–∏": "library",
        "–ß–∞–π–Ω—ã–µ": "tea",
        "–°–ø–∞": "spa",
        "–†–µ–ª–∞–∫—Å-—Ü–µ–Ω—Ç—Ä—ã": "wellness",
        "–£—é—Ç–Ω—ã–µ –∫–∞—Ñ–µ": "cafe",
        "–†–µ—Å—Ç–æ—Ä–∞–Ω—ã": "restaurant",
        "–ë–∞—Ä—ã": "bar",
        "–ö–æ–Ω—Ü–µ—Ä—Ç–Ω—ã–µ –∑–∞–ª—ã": "concert_hall"
    }

    amenity = amenity_map.get(request.category, "cafe") if request.category else "cafe"

    overpass_query = f"""
    [out:json];
    (
      node["amenity"="{amenity}"](around:5500,{request.lat},{request.lon});
      way["amenity"="{amenity}"](around:5500,{request.lat},{request.lon});
      relation["amenity"="{amenity}"](around:5500,{request.lat},{request.lon});
    );
    out center;
    """

    import httpx
    async with httpx.AsyncClient() as client:
        response = await client.post("https://overpass-api.de/api/interpreter", data=overpass_query)
        data = response.json()

    elements = data.get("elements", [])

    places = []
    for el in elements:
        if el["type"] == "node":
            lat = el.get("lat")
            lon = el.get("lon")
        else:
            center = el.get("center", {})
            lat = center.get("lat")
            lon = center.get("lon")

        if lat is None or lon is None:
            continue

        place_name = el.get("tags", {}).get("name") or el.get("tags", {}).get("amenity") or "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è"

        place = Place(
            name=el.get("tags", {}).get("name"),
            lat=lat,
            lon=lon,
            amenity=el.get("tags", {}).get("amenity"),
            osm_type=el.get("type"),
            osm_id=el.get("id"),
        )
        places.append(place)

        print(f"–ü–æ–∏—Å–∫ –ø–æ amenity={amenity}, lat={request.lat}, lon={request.lon}")


    return SearchResponse(places=places)


# --- Telegram-–±–æ—Ç —á–∞—Å—Ç—å ---

ASK_NAME, ASK_MOOD, ASK_BUDGET, ASK_SEARCH_SCOPE, ASK_CATEGORY, ASK_LOCATION, AFTER_SEARCH, MAIN_MENU = range(8)

user_data_store = {}

main_menu_keyboard = ReplyKeyboardMarkup(
    [["üéØ –ù–æ–≤–∞—è –ø–æ–¥–±–æ—Ä–∫–∞", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"]], resize_keyboard=True
)

main_menu_keyboard = ReplyKeyboardMarkup(
    [["‚ú® –ù–∞–π—Ç–∏ –º–µ—Å—Ç–æ", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"]],
    resize_keyboard=True
)

scope_keyboard = ReplyKeyboardMarkup(
    [["üìç –ü–æ–±–ª–∏–∑–æ—Å—Ç–∏", "üèô –ü–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É"]],
    resize_keyboard=True
)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø FeelGo ‚Äî —Ç–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –∏ –º–µ—Å—Ç–∞–º üåü\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def ask_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.effective_user.id] = {
        "name": update.message.text,
        "favorites": []
    }
    await update.message.reply_text(
        f"–†–∞–¥ –ø–æ–∑–Ω–∞–∫–æ–º–∏—Ç—å—Å—è, {update.message.text}! üòä\n–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",
        reply_markup=ReplyKeyboardMarkup([[m] for m in moods.keys()], resize_keyboard=True)
    )
    return ASK_MOOD

async def ask_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.effective_user.id]["mood"] = update.message.text
    await update.message.reply_text(
        "–ù–∞ –∫–∞–∫–æ–π –±—é–¥–∂–µ—Ç —Ç—ã —Ä–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ—à—å?",
        reply_markup=ReplyKeyboardMarkup([[b] for b in budgets.keys()], resize_keyboard=True)
    )
    return ASK_BUDGET

async def ask_scope(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.effective_user.id]["budget"] = update.message.text
    await update.message.reply_text(
        "üîç –ì–¥–µ –∏—Å–∫–∞—Ç—å?",
        reply_markup=scope_keyboard
    )
    return ASK_SEARCH_SCOPE

async def handle_scope(update: Update, context: ContextTypes.DEFAULT_TYPE):
    scope = update.message.text
    user_id = update.effective_user.id
    user_data_store[user_id]["scope"] = scope

    if scope == "üìç –ü–æ–±–ª–∏–∑–æ—Å—Ç–∏":
        await update.message.reply_text(
            "üìç –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é",
            reply_markup=ReplyKeyboardMarkup(
                [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
                resize_keyboard=True
            )
        )
        return ASK_LOCATION

    elif scope == "üåÜ –ü–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É":
        # –ï—Å–ª–∏ –≤—ã–±—Ä–∞–Ω –ø–æ–∏—Å–∫ –ø–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É ‚Äî —Å—Ä–∞–∑—É –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        await update.message.reply_text(
            "–í—ã–±–µ—Ä–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—é –º–µ—Å—Ç–∞:",
            reply_markup=ReplyKeyboardMarkup(
                [["–ö–∞—Ñ–µ", "–ü–∞—Ä–∫–∏"], ["–ö–∏–Ω–æ—Ç–µ–∞—Ç—Ä—ã", "–ú—É–∑–µ–∏"], ["–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return ASK_CATEGORY  # –ø–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤—ã–±–æ—Ä—É –∫–∞—Ç–µ–≥–æ—Ä–∏–∏

    else:
        # –ù–∞ –≤—Å—è–∫–∏–π —Å–ª—É—á–∞–π, –µ—Å–ª–∏ –ø—Ä–∏—à–ª–æ —á—Ç–æ-—Ç–æ –Ω–µ–ø—Ä–µ–¥–≤–∏–¥–µ–Ω–Ω–æ–µ
        await update.message.reply_text(
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –æ–¥–Ω—É –∏–∑ –æ–ø—Ü–∏–π.",
            reply_markup=ReplyKeyboardMarkup(
                [["üìç –ü–æ–±–ª–∏–∑–æ—Å—Ç–∏", "üåÜ –ü–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É"]],
                resize_keyboard=True,
                one_time_keyboard=True
            )
        )
        return ASK_SEARCH_SCOPE

async def handle_category(update: Update, context: ContextTypes.DEFAULT_TYPE):
    category = update.message.text
    user_id = update.effective_user.id
    user_data_store[user_id]["category"] = category

    await update.message.reply_text("‚è≥ –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞...")

    # –¶–µ–Ω—Ç—Ä–∞–ª—å–Ω–∞—è —Ç–æ—á–∫–∞ (–º–æ–∂–µ—à—å –ø–æ–º–µ–Ω—è—Ç—å)
    central_lat = 55.751244
    central_lon = 37.618423

    results = await fetch_recommendations(user_id,
        mood=user_data_store[user_id]["mood"],
        budget=user_data_store[user_id]["budget"],
        lat=central_lat,
        lon=central_lon,
        category=category
    )

    places = results.get("results", [])

    if not places:
        await update.message.reply_text("üôÅ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ —Ü–µ–Ω—Ç—Ä–µ –≥–æ—Ä–æ–¥–∞.")
    else:
        for place in places:
            await update.message.reply_text(f"üèô {place['title']}\nüìç {place['url']}")

    return AFTER_SEARCH

async def ask_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    user_data_store[user_id]["budget"] = update.message.text
    await update.message.reply_text(
        "üîç –ò—â–µ–º –ø–æ–¥—Ö–æ–¥—è—â–∏–µ –º–µ—Å—Ç–∞...\nüìç –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –ª–æ–∫–∞—Ü–∏—é, —á—Ç–æ–±—ã –ø—Ä–æ–¥–æ–ª–∂–∏—Ç—å.",
        reply_markup=ReplyKeyboardMarkup(
            [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)]],
            resize_keyboard=True
        )
    )
    return ASK_LOCATION

async def fetch_recommendations(user_id, mood, budget, lat, lon, category=None):
    json_data = {
        "user_id": user_id,
        "mood": mood,
        "budget": budget,
        "lat": lat,
        "lon": lon
    }

    if category:
        json_data["category"] = category

    async with aiohttp.ClientSession() as session:
        async with session.post("http://localhost:8000/search", json=json_data) as resp:
            return await resp.json()

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    mood = user_data_store[user_id]["mood"]
    budget = user_data_store[user_id]["budget"]
    lat = update.message.location.latitude
    lon = update.message.location.longitude

    await update.message.reply_text("‚è≥ –ü–æ–¥–±–∏—Ä–∞–µ–º –ª—É—á—à–∏–µ –≤–∞—Ä–∏–∞–Ω—Ç—ã...")

    results = await fetch_recommendations(user_id, mood, budget, lat, lon)
    places = results.get("results", [])

    if not places:
        await update.message.reply_text("üôÅ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –ø–æ–±–ª–∏–∑–æ—Å—Ç–∏.")
    else:
        for place in places:
            title = place.get("title")
            url = place.get("url")
            await update.message.reply_text(f"üèô {title}\nüìç {url}")

        user_data_store[user_id]["last_recommendation"] = f"{moods[mood]} {budgets[budget]}"

    await update.message.reply_text(
        "–•–æ—á–µ—à—å –¥–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ?",
        reply_markup=ReplyKeyboardMarkup(
            [["‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é"]],
            resize_keyboard=True
        )
    )
    return AFTER_SEARCH

async def handle_after_search(update: Update, context: ContextTypes.DEFAULT_TYPE):
    text = update.message.text
    user_id = update.effective_user.id

    if text == "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        last = user_data_store[user_id].get("last_recommendation")
        if last:
            user_data_store[user_id]["favorites"].append(last)
            await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚≠ê", reply_markup=main_menu_keyboard)
        else:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.", reply_markup=main_menu_keyboard)
        return MAIN_MENU

    elif text == "üîô –ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é":
        await update.message.reply_text("–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é:", reply_markup=main_menu_keyboard)
        return MAIN_MENU

    elif text == "üéØ –ù–æ–≤–∞—è –ø–æ–¥–±–æ—Ä–∫–∞":
        await update.message.reply_text(
            "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",
            reply_markup=ReplyKeyboardMarkup([[m] for m in moods.keys()], resize_keyboard=True)
        )
        return ASK_MOOD

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return AFTER_SEARCH

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "‚úÖ –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ":
        last = user_data_store[user_id].get("last_recommendation")
        if last:
            user_data_store[user_id]["favorites"].append(last)
            await update.message.reply_text("–î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ! ‚≠ê", reply_markup=main_menu_keyboard)
        else:
            await update.message.reply_text("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è.")
        return MAIN_MENU

    elif text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        favorites = user_data_store[user_id].get("favorites", [])
        if favorites:
            await update.message.reply_text("\n\n".join(favorites), reply_markup=main_menu_keyboard)
        else:
            await update.message.reply_text("–ü–æ–∫–∞ —á—Ç–æ —Å–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.", reply_markup=main_menu_keyboard)
        return MAIN_MENU

    elif text == "üéØ –ù–æ–≤–∞—è –ø–æ–¥–±–æ—Ä–∫–∞":
        await update.message.reply_text(
            "–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?",
            reply_markup=ReplyKeyboardMarkup(
                [[m] for m in moods.keys()], resize_keyboard=True)
        )
        return ASK_MOOD

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

def start_bot():
    TOKEN = "7800040116:AAGpWmzJoP79h2hA5q7VQNmDiI2jJCagKM8"
    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_mood)],
            ASK_MOOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_budget)],
            ASK_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_scope)],
            ASK_SEARCH_SCOPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_scope)],
            ASK_CATEGORY: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_category)],
            ASK_LOCATION: [MessageHandler(filters.LOCATION, handle_location)],
            AFTER_SEARCH: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_after_search)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(conv_handler)
    print("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

# --- –ó–∞–ø—É—Å–∫ FastAPI –∏ Telegram –±–æ—Ç–∞ –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ ---

def run_fastapi():
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º FastAPI —Å–µ—Ä–≤–µ—Ä –≤ –æ—Ç–¥–µ–ª—å–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    threading.Thread(target=run_fastapi, daemon=True).start()
    # –ó–∞–ø—É—Å–∫–∞–µ–º Telegram-–±–æ—Ç–∞ –≤ –æ—Å–Ω–æ–≤–Ω–æ–º –ø–æ—Ç–æ–∫–µ
    start_bot()
