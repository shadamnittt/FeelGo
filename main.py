from fastapi import FastAPI
from pydantic import BaseModel
from typing import List
from telegram import Update, ReplyKeyboardMarkup, KeyboardButton
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, filters, ContextTypes, ConversationHandler
import aiohttp
import threading

# --- FastAPI —á–∞—Å—Ç—å ---

from fastapi import FastAPI
from pydantic import BaseModel
from typing import List
import aiohttp

app = FastAPI()

class SearchRequest(BaseModel):
    user_id: int
    mood: str
    budget: str
    lat: float
    lon: float
    scope: str  # "nearby" or "city"

class Place(BaseModel):
    title: str
    url: str

class SearchResponse(BaseModel):
    results: List[Place]

@app.post("/search", response_model=SearchResponse)
async def search_places(request: SearchRequest):
    radius = 1000 if request.scope == "nearby" else 5000
    categories = ["cafe", "restaurant", "library", "spa", "park", "bowling_alley"]

    queries = "\n".join([
        f"node[\"amenity\"=\"{cat}\"](around:{radius},{request.lat},{request.lon});" for cat in categories
    ])

    overpass_query = f"""
    [out:json];
    (
        {queries}
    );
    out;
    """

    overpass_url = "https://overpass-api.de/api/interpreter"
    async with aiohttp.ClientSession() as session:
        async with session.post(overpass_url, data=overpass_query) as resp:
            data = await resp.json()

    places = []
    for element in data.get("elements", []):
        name = element.get("tags", {}).get("name", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
        lat = element.get("lat")
        lon = element.get("lon")
        url = f"https://www.openstreetmap.org/?mlat={lat}&mlon={lon}#map=18/{lat}/{lon}"
        places.append({"title": name, "url": url})

    return SearchResponse(results=places)

# --- Telegram-–±–æ—Ç —á–∞—Å—Ç—å ---

from telegram import Update, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardButton, InlineKeyboardMarkup
from telegram.ext import ApplicationBuilder, CommandHandler, MessageHandler, CallbackQueryHandler, filters, ContextTypes, ConversationHandler
import threading

ASK_NAME, ASK_MOOD, ASK_BUDGET, ASK_SCOPE, ASK_LOCATION, SHOW_PLACES, MAIN_MENU = range(7)

user_data_store = {}

main_menu_keyboard = ReplyKeyboardMarkup([
    ["üéØ –ù–æ–≤–∞—è –ø–æ–¥–±–æ—Ä–∫–∞", "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ"]
], resize_keyboard=True)

async def start(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–ü—Ä–∏–≤–µ—Ç! –Ø FeelGo ‚Äî —Ç–≤–æ–π –Ω–∞–≤–∏–≥–∞—Ç–æ—Ä –ø–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∏—é –∏ –º–µ—Å—Ç–∞–º üåü\n–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?")
    return ASK_NAME

async def ask_mood(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.effective_user.id] = {
        "name": update.message.text,
        "favorites": []
    }
    await update.message.reply_text("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?", reply_markup=ReplyKeyboardMarkup(
        [[m] for m in moods.keys()], resize_keyboard=True))
    return ASK_MOOD

async def ask_budget(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.effective_user.id]["mood"] = update.message.text
    await update.message.reply_text("–ö–∞–∫–æ–π —É —Ç–µ–±—è –±—é–¥–∂–µ—Ç?", reply_markup=ReplyKeyboardMarkup(
        [[b] for b in budgets.keys()], resize_keyboard=True))
    return ASK_BUDGET

async def ask_scope(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.effective_user.id]["budget"] = update.message.text
    await update.message.reply_text("–ì–¥–µ –∏—Å–∫–∞—Ç—å –º–µ—Å—Ç–∞?", reply_markup=ReplyKeyboardMarkup(
        [["üìç –ü–æ–±–ª–∏–∑–æ—Å—Ç–∏", "üèôÔ∏è –ü–æ –≤—Å–µ–º—É –≥–æ—Ä–æ–¥—É"]], resize_keyboard=True))
    return ASK_SCOPE

async def ask_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_data_store[update.effective_user.id]["scope"] = "nearby" if "–ü–æ–±–ª–∏–∑–æ—Å—Ç–∏" in update.message.text else "city"
    await update.message.reply_text("üìç –û—Ç–ø—Ä–∞–≤—å —Å–≤–æ—é –≥–µ–æ–ª–æ–∫–∞—Ü–∏—é:", reply_markup=ReplyKeyboardMarkup(
        [[KeyboardButton("üìç –û—Ç–ø—Ä–∞–≤–∏—Ç—å –ª–æ–∫–∞—Ü–∏—é", request_location=True)]], resize_keyboard=True))
    return ASK_LOCATION

async def fetch_recommendations(user_id, mood, budget, lat, lon, scope):
    async with aiohttp.ClientSession() as session:
        async with session.post("http://localhost:8000/search", json={
            "user_id": user_id,
            "mood": mood,
            "budget": budget,
            "lat": lat,
            "lon": lon,
            "scope": scope
        }) as resp:
            return await resp.json()

async def handle_location(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    lat = update.message.location.latitude
    lon = update.message.location.longitude
    user_data = user_data_store[user_id]

    await update.message.reply_text("‚è≥ –ò—â–µ–º –º–µ—Å—Ç–∞...")
    results = await fetch_recommendations(user_id, user_data["mood"], user_data["budget"], lat, lon, user_data["scope"])
    places = results.get("results", [])

    if not places:
        await update.message.reply_text("üôÅ –ù–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ.")
        return MAIN_MENU

    user_data["recommendations"] = places

    for idx, place in enumerate(places):
        text = f"üèô {place['title']}\nüìç {place['url']}"
        keyboard = InlineKeyboardMarkup.from_button(InlineKeyboardButton("‚≠ê –î–æ–±–∞–≤–∏—Ç—å –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ", callback_data=f"fav_{idx}"))
        await update.message.reply_text(text, reply_markup=keyboard)

    return MAIN_MENU

async def handle_callback(update: Update, context: ContextTypes.DEFAULT_TYPE):
    query = update.callback_query
    await query.answer()
    user_id = query.from_user.id
    idx = int(query.data.split("_")[1])
    place = user_data_store[user_id]["recommendations"][idx]
    user_data_store[user_id]["favorites"].append(f"{place['title']}\n{place['url']}")
    await query.edit_message_reply_markup(None)
    await query.message.reply_text("‚≠ê –î–æ–±–∞–≤–ª–µ–Ω–æ –≤ –∏–∑–±—Ä–∞–Ω–Ω–æ–µ!", reply_markup=main_menu_keyboard)

async def handle_main_menu(update: Update, context: ContextTypes.DEFAULT_TYPE):
    user_id = update.effective_user.id
    text = update.message.text

    if text == "‚≠ê –ò–∑–±—Ä–∞–Ω–Ω–æ–µ":
        favorites = user_data_store[user_id].get("favorites", [])
        if favorites:
            await update.message.reply_text("\n\n".join(favorites))
        else:
            await update.message.reply_text("–°–ø–∏—Å–æ–∫ –∏–∑–±—Ä–∞–Ω–Ω–æ–≥–æ –ø—É—Å—Ç.")
        return MAIN_MENU

    elif text == "üéØ –ù–æ–≤–∞—è –ø–æ–¥–±–æ—Ä–∫–∞":
        await update.message.reply_text("–ö–∞–∫ —Ç—ã —Å–µ–±—è —á—É–≤—Å—Ç–≤—É–µ—à—å?", reply_markup=ReplyKeyboardMarkup(
            [[m] for m in moods.keys()], resize_keyboard=True))
        return ASK_MOOD

    else:
        await update.message.reply_text("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤—ã–±–µ—Ä–∏ –¥–µ–π—Å—Ç–≤–∏–µ –∏–∑ –º–µ–Ω—é.")
        return MAIN_MENU

async def cancel(update: Update, context: ContextTypes.DEFAULT_TYPE):
    await update.message.reply_text("–î–∏–∞–ª–æ–≥ –∑–∞–≤–µ—Ä—à—ë–Ω. –ù–∞–ø–∏—à–∏ /start, —á—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ.")
    return ConversationHandler.END

# --- –°–ª–æ–≤–∞—Ä–∏ —Å–æ—Å—Ç–æ—è–Ω–∏–π ---

moods = {
    "üòî –ì—Ä—É—Å—Ç—å": "–í–æ—Ç —É—é—Ç–Ω—ã–µ –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–Ω–æ –Ω–µ–º–Ω–æ–≥–æ –æ—Ç–≤–ª–µ—á—å—Å—è –∏ –æ—Ç–¥–æ—Ö–Ω—É—Ç—å.",
    "üòç –†–∞–¥–æ—Å—Ç—å": "–í–æ—Ç –º–µ—Å—Ç–∞, –≥–¥–µ —Ç—ã —Å–º–æ–∂–µ—à—å –∑–∞—Ä—è–¥–∏—Ç—å—Å—è –µ—â—ë –±–æ–ª—å—à–µ!",
    "üò† –ó–ª–æ—Å—Ç—å": "–í–æ—Ç –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏, —á—Ç–æ–±—ã –≤—ã–ø—É—Å—Ç–∏—Ç—å –ø–∞—Ä –∏ –æ—Ç–≤–ª–µ—á—å—Å—è.",
    "üôÇ –°–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ": "–í–æ—Ç –ø—Ä–∏—è—Ç–Ω—ã–µ –∏ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ã–µ –ª–æ–∫–∞—Ü–∏–∏ –¥–ª—è –æ—Ç–¥—ã—Ö–∞.",
    "ü§Ø –£—Å—Ç–∞–ª–æ—Å—Ç—å": "–í–æ—Ç –º–µ—Å—Ç–∞, –≥–¥–µ –º–æ–∂–Ω–æ –ø–µ—Ä–µ–∑–∞–≥—Ä—É–∑–∏—Ç—å—Å—è –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è.",
    "ü§© –í–¥–æ—Ö–Ω–æ–≤–µ–Ω–∏–µ": "–í–æ—Ç –∫—Ä–µ–∞—Ç–∏–≤–Ω—ã–µ –ø—Ä–æ—Å—Ç—Ä–∞–Ω—Å—Ç–≤–∞, —á—Ç–æ–±—ã –∑–∞—Ä—è–¥–∏—Ç—å—Å—è –∏–¥–µ—è–º–∏."
}

budgets = {
    "üí∏ –≠–∫–æ–Ω–æ–º": "–ë—é–¥–∂–µ—Ç–Ω—ã–π –≤–∞—Ä–∏–∞–Ω—Ç.",
    "üí∞ –°—Ä–µ–¥–Ω–∏–π": "–•–æ—Ä–æ—à–∏–π –±–∞–ª–∞–Ω—Å –º–µ–∂–¥—É —Ü–µ–Ω–æ–π –∏ –∞—Ç–º–æ—Å—Ñ–µ—Ä–æ–π.",
    "üíé –ü—Ä–µ–º–∏—É–º": "–ü—Ä–µ–º–∏–∞–ª—å–Ω—ã–µ –≤–ø–µ—á–∞—Ç–ª–µ–Ω–∏—è –∂–¥—É—Ç —Ç–µ–±—è!"
}

# --- –ó–∞–ø—É—Å–∫ ---

def start_bot():
    TOKEN = "7800040116:AAGpWmzJoP79h2hA5q7VQNmDiI2jJCagKM8"
    application = ApplicationBuilder().token(TOKEN).build()

    conv_handler = ConversationHandler(
        entry_points=[CommandHandler("start", start)],
        states={
            ASK_NAME: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_mood)],
            ASK_MOOD: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_budget)],
            ASK_BUDGET: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_scope)],
            ASK_SCOPE: [MessageHandler(filters.TEXT & ~filters.COMMAND, ask_location)],
            ASK_LOCATION: [MessageHandler(filters.LOCATION, handle_location)],
            MAIN_MENU: [MessageHandler(filters.TEXT & ~filters.COMMAND, handle_main_menu)],
        },
        fallbacks=[CommandHandler("cancel", cancel)]
    )

    application.add_handler(conv_handler)
    application.add_handler(CallbackQueryHandler(handle_callback))
    print("Telegram-–±–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    application.run_polling()

def run_fastapi():
    import uvicorn
    uvicorn.run(app, host="0.0.0.0", port=8000)

if __name__ == "__main__":
    threading.Thread(target=run_fastapi, daemon=True).start()
    start_bot()


